import logging
import requests
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from deep_translator import GoogleTranslator

# –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô TELEGRAM –¢–û–ö–ï–ù
TELEGRAM_TOKEN = "7658728324:AAGLB1QFCSNxYWNuOMfO7PU3FxV4hWd6lUQ"
HF_API_KEY = "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"
MODEL_URL = "https://api-inference.huggingface.co/models/prompthero/openjourney"

headers = {"Authorization": f"Bearer {HF_API_KEY}"}

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
def translate_to_english(text):
    try:
        translated = GoogleTranslator(source='auto', target='en').translate(text)
        return translated
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", e)
        return text

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def generate_image(prompt):
    try:
        response = requests.post(MODEL_URL, headers=headers, json={"inputs": prompt})
        if response.status_code == 200:
            return response.content
        else:
            return None
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", e)
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_prompt = update.message.text
    translated_prompt = translate_to_english(user_prompt)
    
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    image_bytes = generate_image(translated_prompt)

    if isinstance(image_bytes, bytes):
        image_file = BytesIO(image_bytes)
        image_file.name = "image.png"
        await update.message.reply_photo(photo=image_file)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø - Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞.

–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.

–ü—Ä–∏–º–µ—Ä: –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ üöÄ"""

    menu_keyboard = [
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å"), KeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ")],
    ]
    reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
2. –Ø –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
3. –ü–æ–ª—É—á–∏—à—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!

üëâ –ü—Ä–∏–º–µ—Ä: –¥–µ–≤—É—à–∫–∞ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ –ø–æ–¥ –¥–æ–∂–¥—ë–º

üí° –°–æ–≤–µ—Ç—ã:
- –£–∫–∞–∑—ã–≤–∞–π —Å—Ç–∏–ª—å: "—Ä–µ–∞–ª–∏–∑–º", "–∞–Ω–∏–º–µ", "—Ñ—ç–Ω—Ç–µ–∑–∏"
- –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ç–µ–º –∫—Ä—É—á–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"""
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /about
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = """ü§ñ –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.

üîç –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å Stable Diffusion –æ—Ç Hugging Face.

üìù –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å, –∏ —è –Ω–∞—Ä–∏—Å—É—é —ç—Ç–æ!"""
    await update.message.reply_text(about_text)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.run_polling()
