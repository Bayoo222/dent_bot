# dent_bot.py

import logging
import sqlite3
import asyncio
import aiohttp
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import nest_asyncio
from datetime import datetime
import random

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "7696464203:AAEeceaMsz36om3ayFf1OI3OooQuIU5MX0s"
HF_API_KEY = "hf_yiXHJcVgGElHAoknagufsiDerPyisexT"
ADMINS = [996386959]
DB_PATH = "dent_bot.db"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        registered_at TEXT
    )""")
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS bonuses (
        user_id INTEGER PRIMARY KEY,
        points INTEGER DEFAULT 0
    )""")
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, registered_at) VALUES (?, ?, ?, ?)",
                   (user_id, username, first_name, datetime.now().isoformat()))
    cursor.execute("INSERT OR IGNORE INTO bonuses (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()

def get_user_bonus(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT points FROM bonuses WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def update_bonus(user_id, amount):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE bonuses SET points = points + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username, first_name FROM users")
    users = cursor.fetchall()
    conn.close()
    return users

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ===
async def generate_article_from_huggingface(api_key):
    prompts = [
        "ü™• –õ–∞–π—Ñ—Ö–∞–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∑—É–±–∞–º–∏: –∫–∞–∫ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã 2 –º–∏–Ω—É—Ç—ã –∏ –Ω–µ –∑–∞—Å–∫—É—á–∞—Ç—å?",
        "üç¨ –ü—Ä–∞–≤–¥–∞ –ª–∏, —á—Ç–æ —Å–ª–∞–¥–∫–æ–µ —Ä–∞–∑—Ä—É—à–∞–µ—Ç –∑—É–±—ã? –ú–∏—Ñ—ã –∏ —Ñ–∞–∫—Ç—ã –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ —É–ª—ã–±–∫–µ!",
        "üòÅ –°–µ–∫—Ä–µ—Ç—ã –±–µ–ª–æ—Å–Ω–µ–∂–Ω–æ–π —É–ª—ã–±–∫–∏: 3 –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–≤–µ—Ç–∞ –æ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞",
        "üò¨ –ë–æ–∏—Ç–µ—Å—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞? –í–æ—Ç –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è –≤–∏–∑–∏—Ç–∞ –∫ –≤—Ä–∞—á—É!",
        "ü¶∑ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è —â—ë—Ç–∫–∞ ‚Äî —á—Ç–æ –ª—É—á—à–µ? –†–∞–∑–±–∏—Ä–∞–µ–º –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã!"
    ]
    prompt = random.choice(prompts)
    url = "https://api-inference.huggingface.co/models/bigscience/bloomz-560m"
    headers = {"Authorization": f"Bearer {api_key}"}
    payload = {"inputs": prompt, "parameters": {"max_new_tokens": 300}}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, headers=headers, json=payload, timeout=60) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data[0]["generated_text"].replace(prompt, "").strip()
                else:
                    logger.error(f"HuggingFace API error: {resp.status}")
                    return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏."

# === –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç—å–∏ ===
async def scheduled_article(context):
    users = get_all_users()
    article = await generate_article_from_huggingface(HF_API_KEY)

    for user_id, _, _ in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=article)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# === –ú–µ–Ω—é ===
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("ü¶∑ –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data="bonuses")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_menu():
    keyboard = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç—å–∏", callback_data="admin_article")],
        [InlineKeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã", callback_data="choose_add_bonus")],
        [InlineKeyboardButton("‚ûñ –°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã", callback_data="choose_remove_bonus")]
    ]
    return InlineKeyboardMarkup(keyboard)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name)

    if user.id in ADMINS:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=get_admin_menu())
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç.", reply_markup=get_main_menu())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "services":
        await query.message.reply_text("ü¶∑ –ù–∞—à–∏ —É—Å–ª—É–≥–∏: –ß–∏—Å—Ç–∫–∞, –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è, –ª–µ—á–µ–Ω–∏–µ.")
    elif query.data == "bonuses":
        bonus = get_user_bonus(query.from_user.id)
        await query.message.reply_text(f"üéÅ –í–∞—à–∏ –±–æ–Ω—É—Å—ã: {bonus} –±–∞–ª–ª–æ–≤")
    elif query.data == "about":
        await query.message.reply_text("‚ÑπÔ∏è –ú—ã ‚Äî —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞.")
    elif query.data == "contacts":
        await query.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 123-45-67")
    elif query.data == "admin_users" and query.from_user.id in ADMINS:
        users = get_all_users()
        text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join([f"{u[2]} (@{u[1]}) ‚Äî {get_user_bonus(u[0])} –±–æ–Ω—É—Å–æ–≤" for u in users])
        await query.message.reply_text(text)
    elif query.data == "admin_article" and query.from_user.id in ADMINS:
        await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")
        await scheduled_article(context)
        await query.message.reply_text("‚úÖ –°—Ç–∞—Ç—å—è —Ä–∞–∑–æ—Å–ª–∞–Ω–∞!")
    elif query.data in ["choose_add_bonus", "choose_remove_bonus"]:
        action = "add" if query.data == "choose_add_bonus" else "remove"
        context.user_data['bonus_action'] = action
        users = get_all_users()
        buttons = [InlineKeyboardButton(f"{u[2]} (@{u[1]})", callback_data=f"bonus_target_{u[0]}") for u in users]
        markup = InlineKeyboardMarkup.from_column(buttons)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    elif query.data.startswith("bonus_target_"):
        user_id = int(query.data.split("_")[-1])
        context.user_data['target_user'] = user_id
        await query.message.reply_text("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):")

async def bonus_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return

    try:
        amount = int(update.message.text.strip())
        user_id = context.user_data.get('target_user')
        action = context.user_data.get('bonus_action')
        if not user_id or not action:
            return
        update_bonus(user_id, amount if action == 'add' else -amount)
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        await context.bot.send_message(chat_id=user_id, text=f"üîî –í–∞—à–∏ –±–æ–Ω—É—Å—ã –±—ã–ª–∏ {'–Ω–∞—á–∏—Å–ª–µ–Ω—ã' if action == 'add' else '—Å–ø–∏—Å–∞–Ω—ã'}: {amount} –±–∞–ª–ª–æ–≤")
        context.user_data.clear()
    except:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(None, bonus_text_input))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: scheduled_article(app.bot), "interval", hours=48)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())